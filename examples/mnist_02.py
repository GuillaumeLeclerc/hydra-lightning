import torch
import pytorch_lightning as pl
from torch.nn import functional as F
from torch.utils.data import DataLoader, random_split

from torchvision.datasets.mnist import MNIST
from torchvision import transforms

# ====== NOTE: HYDRA BLOCK =========
import hydra
from omegaconf import MISSING
from dataclasses import dataclass
from typing import Tuple, Any
from hydra.core.config_store import ConfigStore
from config.torch.optim import AdamConf
from pl_config.pytorch_lightning.trainer import TrainerConf

@dataclass
class DataloaderConf:
    batch_size: int = 16
    shuffle: bool = False
    sampler: Any = None
    num_workers: int = 1


@dataclass
class LitClassifierConf:
    trainer: TrainerConf = TrainerConf()
    dataloader: DataloaderConf = DataloaderConf()
    optim_conf: Any = AdamConf()
    hidden_dim: int = 128
    data_shape: int = 1*28*28
    target_shape: int = 1*10
    root_dir: str = '.'
    seed: int = 1234
	
cs = ConfigStore.instance()
cs.store(name="config", node=LitClassifierConf)
# ====== / HYDRA BLOCK =========

class LitClassifier(pl.LightningModule):
    def __init__(
		self,
                # TODO: automatically configure these
		data_shape: int = 28,
		hidden_dim: int = 128,
		target_shape: int = 10,
                optim_conf: Any = AdamConf, # note we pass a default optimizer conf
                **kwargs # NOTE: if you want hparams to contain/log your whole cfg, this is important 
		):
        super().__init__()
        self.save_hyperparameters()

        self.optim_conf = optim_conf
        self.l1 = torch.nn.Linear(data_shape,self.hparams.hidden_dim)
        self.l2 = torch.nn.Linear(self.hparams.hidden_dim, target_shape)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = torch.relu(self.l1(x))
        x = torch.relu(self.l2(x))
        return x

    def training_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        return loss

    def validation_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        self.log('valid_loss', loss)

    def test_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        self.log('test_loss', loss)

    def configure_optimizers(self):
        return hydra.utils.instantiate(self.optim_conf, params=list(self.parameters())) # TODO: determine if list is necessary here

@hydra.main(config_name='config')
def cli_main(cfg):
    # NOTE: needed so that data is only downloaded once
    cfg.root_dir = hydra.utils.get_original_cwd()
    print(cfg.pretty())
    pl.seed_everything(cfg.seed)

    # ------------
    # data
    # ------------
    dataset = MNIST(root=cfg.root_dir, train=True, download=True, transform=transforms.ToTensor())
    mnist_test = MNIST(root=cfg.root_dir, train=False, download=True, transform=transforms.ToTensor())
    mnist_train, mnist_val = random_split(dataset, [55000, 5000])

    # HYDRA: until we have configs for DataLoader, instantiate without hydra.utils.instantiate
    train_loader = DataLoader(mnist_train, **cfg.dataloader)
    val_loader = DataLoader(mnist_val, **cfg.dataloader)
    test_loader = DataLoader(mnist_test, **cfg.dataloader)


    # ------------
    # model
    # ------------
    # NOTE: We use LitClassifier(**cfg) since LitClassifier is not an autogenerated hydra-lightning config class and therefore does not have a `__target__` field. One could add this in order to use `hydra.utils.instantiate(cfg.trainer)`.
    model = LitClassifier(**cfg)

    # ------------
    # training
    # ------------
    trainer = hydra.utils.instantiate(cfg.trainer)
    trainer.fit(model, train_loader, val_loader)

    # ------------
    # testing
    # ------------
    trainer.test(test_dataloaders=test_loader)


if __name__ == '__main__':
    cli_main()
